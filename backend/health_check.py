"""
Health check script for production deployment
V√©rifie que toutes les d√©pendances critiques sont disponibles
"""

import sys
import os
import logging

# Configuration logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_critical_dependencies():
    """V√©rifier les d√©pendances critiques pour le d√©ploiement"""
    
    critical_errors = []
    warnings = []
    
    print("üîç V√©rification des d√©pendances critiques...")
    
    # 1. V√©rifier les imports essentiels
    essential_modules = [
        'fastapi',
        'uvicorn', 
        'pymongo',
        'requests',
        'beautifulsoup4',
        'openai',
        'nltk',
        'pandas',
        'numpy',
        'reportlab'
    ]
    
    for module_name in essential_modules:
        try:
            __import__(module_name)
            print(f"‚úÖ {module_name}")
        except ImportError as e:
            critical_errors.append(f"‚ùå Module critique manquant: {module_name} - {e}")
    
    # 2. V√©rifier les modules optionnels
    optional_modules = [
        ('snscrape', 'Scraping Twitter/X - peut utiliser fallback RSS'),
        ('aiohttp', 'Requ√™tes asynchrones - peut utiliser requests'),
        ('streamlink', 'Capture radio - fonctionnalit√© optionnelle'),
        ('ffmpeg', 'Traitement audio - fonctionnalit√© optionnelle')
    ]
    
    for module_name, description in optional_modules:
        try:
            __import__(module_name)
            print(f"‚úÖ {module_name} (optionnel)")
        except ImportError:
            warnings.append(f"‚ö†Ô∏è Module optionnel manquant: {module_name} - {description}")
    
    # 3. V√©rifier la configuration MongoDB
    mongo_url = os.environ.get('MONGO_URL', 'non configur√©')
    if mongo_url == 'non configur√©':
        critical_errors.append("‚ùå Variable MONGO_URL non configur√©e")
    else:
        print(f"‚úÖ MONGO_URL configur√©: {mongo_url[:50]}...")
        
        # Test de connection MongoDB
        try:
            from pymongo import MongoClient
            if 'mongodb+srv://' in mongo_url or 'atlas' in mongo_url.lower():
                client = MongoClient(
                    mongo_url,
                    serverSelectionTimeoutMS=5000,
                    connectTimeoutMS=5000
                )
            else:
                client = MongoClient(mongo_url)
            
            client.admin.command('ping')
            print("‚úÖ Connection MongoDB r√©ussie")
            client.close()
        except Exception as e:
            critical_errors.append(f"‚ùå Erreur connection MongoDB: {e}")
    
    # 4. V√©rifier les variables d'environnement optionnelles
    env_vars = [
        ('OPENAI_API_KEY', 'Cl√© API OpenAI pour GPT et Whisper'),
        ('ENVIRONMENT', 'Environnement (development/production)'),
        ('TELEGRAM_BOT_TOKEN', 'Token Telegram pour alertes'),
        ('TWITTER_API_KEY', 'Cl√© API Twitter pour r√©seaux sociaux')
    ]
    
    for var_name, description in env_vars:
        value = os.environ.get(var_name)
        if value:
            print(f"‚úÖ {var_name} configur√©")
        else:
            warnings.append(f"‚ö†Ô∏è Variable optionnelle manquante: {var_name} - {description}")
    
    # 5. R√©sultats
    print("\n" + "="*60)
    
    if critical_errors:
        print("üö® ERREURS CRITIQUES:")
        for error in critical_errors:
            print(error)
        print("\n‚ùå D√©ploiement √©chouera probablement")
        return False
    else:
        print("‚úÖ Toutes les d√©pendances critiques sont disponibles")
    
    if warnings:
        print("\n‚ö†Ô∏è AVERTISSEMENTS (non critiques):")
        for warning in warnings:
            print(warning)
        print("\nüü° D√©ploiement possible avec fonctionnalit√©s limit√©es")
    else:
        print("\nüéâ Toutes les d√©pendances sont parfaitement configur√©es")
    
    return True

def check_file_structure():
    """V√©rifier la structure des fichiers essentiels"""
    
    print("\nüîç V√©rification de la structure des fichiers...")
    
    essential_files = [
        'server.py',
        'scraper_service.py',
        'requirements.txt'
    ]
    
    missing_files = []
    
    for filename in essential_files:
        filepath = os.path.join(os.path.dirname(__file__), filename)
        if os.path.exists(filepath):
            print(f"‚úÖ {filename}")
        else:
            missing_files.append(filename)
            print(f"‚ùå {filename} manquant")
    
    if missing_files:
        print(f"\n‚ùå Fichiers manquants: {', '.join(missing_files)}")
        return False
    
    print("\n‚úÖ Structure des fichiers correcte")
    return True

def main():
    """Point d'entr√©e principal du health check"""
    
    print("üè• Health Check - Veille M√©dia Guadeloupe")
    print("="*60)
    
    # V√©rifications
    deps_ok = check_critical_dependencies()
    files_ok = check_file_structure()
    
    print("\n" + "="*60)
    
    if deps_ok and files_ok:
        print("üéâ HEALTH CHECK R√âUSSI - Pr√™t pour le d√©ploiement")
        sys.exit(0)
    else:
        print("üö® HEALTH CHECK √âCHOU√â - Corrections n√©cessaires")
        sys.exit(1)

if __name__ == "__main__":
    main()